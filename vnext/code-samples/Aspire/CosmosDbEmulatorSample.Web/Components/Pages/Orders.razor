@page "/orders"
@rendermode InteractiveServer
@inject OrderApiClient OrderApi
@inject ILogger<Orders> Logger

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMessage
        <button type="button" class="btn-close" @onclick="ClearError" aria-label="Close"></button>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3>Order Management (@orders.Count orders)</h3>
                <a href="/create-order" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i> Create New Order
                </a>
            </div>

            @if (orders.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Order ID</th>
                                <th>Customer ID</th>
                                <th>Order Date</th>
                                <th>Status</th>
                                <th>Items</th>
                                <th>Total Amount</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in orders)
                            {
                                <tr>
                                    <td>@order.Id</td>
                                    <td>@order.CustomerId</td>
                                    <td>@order.OrderDate.ToString("MMM dd, yyyy HH:mm")</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(order.Status)">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td>@order.Items.Count item(s)</td>
                                    <td>$@order.TotalAmount.ToString("F2")</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-info" @onclick="() => ToggleOrderDetails(order.Id)">
                                            @if (expandedOrders.Contains(order.Id))
                                            {
                                                <i class="bi bi-eye-slash"></i> @("Hide")
                                            }
                                            else
                                            {
                                                <i class="bi bi-eye"></i> @("View")
                                            }
                                        </button>
                                    </td>
                                </tr>
                                @if (expandedOrders.Contains(order.Id))
                                {
                                    <tr>
                                        <td colspan="7">
                                            <div class="card">
                                                <div class="card-header">
                                                    <h6>Order Items</h6>
                                                </div>
                                                <div class="card-body">
                                                    <div class="table-responsive">
                                                        <table class="table table-sm">
                                                            <thead>
                                                                <tr>
                                                                    <th>Product ID</th>
                                                                    <th>Product Name</th>
                                                                    <th>Quantity</th>
                                                                    <th>Unit Price</th>
                                                                    <th>Total Price</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach (var item in order.Items)
                                                                {
                                                                    <tr>
                                                                        <td>@item.ProductId</td>
                                                                        <td>@item.ProductName</td>
                                                                        <td>@item.Quantity</td>
                                                                        <td>$@item.UnitPrice.ToString("F2")</td>
                                                                        <td>$@item.TotalPrice.ToString("F2")</td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-cart" style="font-size: 3rem; color: #6c757d;"></i>
                    <h4 class="mt-3 text-muted">No Orders Found</h4>
                    <p class="text-muted">Start by creating your first order.</p>
                    <a href="/create-order" class="btn btn-primary">Create Your First Order</a>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<OrderDto> orders = new();
    private HashSet<string> expandedOrders = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private void ClearError()
    {
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private void ToggleOrderDetails(string orderId)
    {
        if (expandedOrders.Contains(orderId))
        {
            expandedOrders.Remove(orderId);
        }
        else
        {
            expandedOrders.Add(orderId);
        }
        StateHasChanged();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "bg-warning text-dark",
            "processing" => "bg-info",
            "shipped" => "bg-primary",
            "delivered" => "bg-success",
            "cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private async Task LoadOrdersAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            Logger.LogInformation("Loading orders...");
            orders = await OrderApi.GetOrdersAsync();
            Logger.LogInformation("Loaded {Count} orders", orders.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load orders");
            errorMessage = $"Failed to load orders: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
